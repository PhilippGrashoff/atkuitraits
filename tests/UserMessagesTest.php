<?php declare(strict_types=1);

namespace atkuitraits\tests;

use Atk4\Core\AtkPhpunit\TestCase;
use Atk4\Data\ValidationException;
use Atk4\Ui\App;
use atk4\ui\jsToast;
use atkuitraits\UserMessages;

class UserMessagesTest extends TestCase
{

    private App $appWithUserMessages;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $appClass = new class extends App {
            public $userMessages;

            public function __construct($defaults = [])
            {
                parent::__construct($defaults);
                $this->userMessages = new UserMessages();
            }
        };

        $this->appWithUserMessages = $appClass;
    }

    public function testAddMessage()
    {
        $userMessages = new UserMessages();
        $userMessages->addMessage('TestMessage1', 'success');
        $userMessages->addMessage('TestMessage2');
        $userMessages->addMessage('TestMessage3', 'error');
        $userMessages->addMessage('TestMessage4', 'warning');
        self::assertEquals(count($userMessages->getAsJsToasts()), 4);
        self::assertTrue($userMessages->getAsJsToasts()[0] instanceof jsToast);
        $htmlstring = $userMessages->getAsHtml();
        self::assertTrue(strpos($htmlstring, 'class="ui message') !== false);
        $inlinehtml = $userMessages->getAsHtml(true);
        self::assertTrue(strpos($inlinehtml, 'style="color:') !== false);
    }

    public function testSetDuration()
    {
        $userMessages = new UserMessages();
        $userMessages->addMessage('TestMessage1', 'success', 2000);
        $res = $userMessages->getAsJsToasts();
        self::assertEquals(2000, $res[0]->settings['displayTime']);

        $userMessages->addMessage('TestMessage1', 'success', 0);
        $res = $userMessages->getAsJsToasts();
        self::assertEquals(0, $res[1]->settings['displayTime']);

        $userMessages->addMessage('TestMessage1', 'success');
        $res = $userMessages->getAsJsToasts();
        self::assertEquals(3000, $res[2]->settings['displayTime']);

        $userMessages->addMessage('TestMessage1', 'warning');
        $res = $userMessages->getAsJsToasts();
        self::assertEquals(8000, $res[3]->settings['displayTime']);

        $userMessages->addMessage('TestMessage1', 'error');
        $res = $userMessages->getAsJsToasts();
        self::assertEquals(8000, $res[4]->settings['displayTime']);
    }

    public function testOutputExceptionTraitDataException()
    {
        $app = new App(['nologin'], ['always_run' => false]);
        $app->initLayout([Admin::class]);
        $v = $app->add(new TestViewForOutputException());
        try {
            throw new \atk4\data\Exception('Some Error');
        } catch (\Exception $e) {
            $res = $v->outputException($e);
            self::assertTrue(strpos($res[0], 'Ein technischer Fehler ist aufgetreten') !== false);
        }
    }

    public function testOutputExceptionTraitUserException()
    {
        $app = new App(['nologin'], ['always_run' => false]);
        $app->initLayout([Admin::class]);
        $v = $app->add(new TestViewForOutputException());
        try {
            throw new UserException('Some Error Duggu');
        } catch (\Exception $e) {
            $res = $v->outputException($e);
            self::assertTrue(strpos($res[0], 'Some Error Duggu') !== false);
        }
    }

    public function testOutputExceptionTraitSingleValidationException()
    {
        $app = new App(['nologin'], ['always_run' => false]);
        $app->initLayout([Admin::class]);
        $v = $app->add(new TestViewForOutputException());
        try {
            throw new ValidationException(['Some Error']);
        } catch (\Exception $e) {
            $res = $v->outputException($e);
            self::assertTrue(strpos($res[0], 'Some Error') !== false);
        }
    }

    public function testOutputExceptionTraitMultipleValidationException()
    {
        $app = new App(['nologin'], ['always_run' => false]);
        $app->initLayout([Admin::class]);
        $v = $app->add(new TestViewForOutputException());
        try {
            throw new ValidationException(['Some Error1', 'Some Error2']);
        } catch (\Exception $e) {
            $res = $v->outputException($e);
            self::assertTrue(strpos($res[0], 'Some Error1') !== false);
            self::assertTrue(strpos($res[1], 'Some Error2') !== false);
        }
    }

    public function testOutputExceptionTraitReturnAsNotifyException()
    {
        $app = new App(['nologin'], ['always_run' => false]);
        $app->initLayout([Admin::class]);
        $v = $app->add(new TestViewForOutputException());
        try {
            throw new ValidationException(['Some Error1', 'Some Error2']);
        } catch (\Exception $e) {
            $res = $v->outputExceptionAsJsNotify($e);
            self::assertEquals(2, count($res));
        }
    }
}